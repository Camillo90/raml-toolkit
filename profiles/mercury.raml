#%Validation Profile 1.0
# org: cc-dx-runtime
# contact: ccsteelarc@salesforce.com
# slack: https://commercecloud.slack.com/messages/CNDPCJQG3

profile: mercury

# prefixes:
#   myvocab: http://myorg.com/vocabularies/myvocab#

extends: RAML

disabled:
  - amf-parser.WebAPI-mediaType-datatype

violation:
  - at-least-one-2xx-or-3xx-response
  - camelcase-method-displayname
  - camelcase-query-parameters
  - https-required
  - require-api-description
  - no-literal-question-marks-in-property-names
  - no-literal-question-marks-in-parameters
  - no-todo-text-in-description-fields
  - require-method-description
  - require-response-description
  - require-json
  - resource-name-validation
  - version-format
  - base-uri-matches-pattern
  - title-matches-api-name

validations:

  at-least-one-2xx-or-3xx-response:
    message: Methods must have at least one 2xx or 3xx response
    targetClass: apiContract.Operation
    functionConstraint:
      code: |
        function(method) {
          const re = /[23][0-9][0-9]/;
          let returns = (method["apiContract:returns"] || []);
          for (let i = 0; i < returns.length; i++) {
            if (re.test(returns[i]["apiContract:statusCode"])) {
              return true;
            }
          }
          return false;
        }

  camelcase-method-displayname:
    message: The API Method must have displayName and the value must be in camelcase
    targetClass: apiContract.Operation
    propertyConstraints: 
      core.name:
          minCount: 1
          pattern: ^[a-z]+([A-Z]?[a-z0-9]+)*$

  camelcase-query-parameters:
    message: Query parameters names must be in camelcase
    targetClass: apiContract.Parameter
    functionConstraint:
      code: |
        function(parameter) {
          const re = /^[a-z]+([A-Z]?[a-z0-9]+)*$/;

          // Parameters include query, path and headers so we need to check binding to filter
          if (parameter['apiContract:binding'] &&
              parameter['apiContract:binding'] == 'query' &&
              !re.test(parameter['core:name'])
          ) {
            return false;
          }
          return true;
        }

  https-required:
    message: Protocol MUST be HTTPS
    targetClass: apiContract.WebAPI
    propertyConstraints:
      apiContract.scheme:
        in: [https,HTTPS]
        minCount: 1

  require-api-description:
    message: The API Description must be set
    targetClass: apiContract.WebAPI
    propertyConstraints:
      core.description:
        minCount: 1

  no-literal-question-marks-in-property-names:
    message: >
      Property names must not contain question marks when 'required' is present. Using both results in property names that include literal question marks.

      More info: https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#property-declarations
    targetClass: sh.PropertyShape
    propertyConstraints:
      sh.name:
        pattern: ^[^?]*$

  no-literal-question-marks-in-parameters:
    message: >
      Query parameter, path parameter and header names must not contain question marks when 'required' is present. Using both results in names that include literal question marks.

      More info: https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#property-declarations
    targetClass: apiContract.Parameter
    propertyConstraints:
      core.name:
        pattern: ^[^?]*$

  no-todo-text-in-description-fields:
    message: Empty string or The word 'TODO' (case insensitive) is not allowed in any description field.
    targetClass: doc.DomainElement
    functionConstraint:
      code: |
        function(resource) {
          const todoRegex = /\b(todo(_)*)\b|^\s*$/i;
          //doc.DomainElement may not have a description field, return true
          if ( resource['core:description']
            && todoRegex.test(resource['core:description'][0])  ) {
            return false;
          }
          return true;
        }

  require-method-description:
    message: The API Method description must be set
    targetClass: apiContract.Operation
    propertyConstraints:
      core.description:
        minCount: 1

  require-response-description:
    message: The description for API responses must be set
    targetClass: apiContract.Response
    propertyConstraints:
      core.description:
        minCount: 1

  require-json:
    message: Require the API Spec's default mediaType to be application/json
    targetClass: apiContract.WebAPI
    propertyConstraints:
      apiContract.accepts:
        in: ["application/json"]
        minCount: 1

  resource-name-validation:
    message: Resource endpoints must be lowercase (Mercury only)
    targetClass: apiContract.EndPoint
    propertyConstraints:
      apiContract.path:
        pattern: "(\/[a-z]([a-z0-9-])*[a-z0-9]+$)|(\/{[a-zA-Z0-9-]+}$)"

  version-format:
    message: The version must be formatted as v[Major], for example v2
    targetClass: apiContract.WebAPI
    propertyConstraints:
      core.version:
        pattern: ^v[0-9]+$
        minCount: 1

  base-uri-matches-pattern:
    message: The baseUri must match the pattern - https://{shortCode}.api.commercecloud.salesforce.com/<api-family>/<api-name>/{version}
    targetClass: apiContract.WebAPI
    functionConstraint:
      code: |
        function(resource) {
          const baseUriRegex = /^https:\/\/{shortCode}\.api\.commercecloud\.salesforce\.com\/([a-z]([a-z0-9-])*[a-z0-9]+)\/([a-z]([a-z0-9-])*[a-z0-9]+)\/{version}\/?$/;
          const servers = resource['apiContract:server'];
          if(servers.length < 1) {
            return false;
          }
          let result = true;
          servers.forEach(server => {
            urlTemplates = server['core:urlTemplate'];
            urlTemplates.forEach(urlTemplate => {
              if(!baseUriRegex.test(urlTemplate)) {
                result = false;
              }
            });
          });
          return result;
        }

  title-matches-api-name:
    message: The title must match separated and capitalized api-name
    targetClass: apiContract.WebAPI
    functionConstraint:
      code: |
        function(resource) {
          const title = resource['core:name'][0];
          const baseUri = resource['apiContract:server'][0]['core:urlTemplate'][0];
          const apiName = baseUri.split("/")[4];
          const parts = apiName.split("-");
          for(let i=0; i<parts.length; i++) {
            parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].slice(1);
          }
          const transformedApiName = parts.join(" ");
          return title === transformedApiName;
        }

